package com.apiGeneralV8.APIv8Baterias.services;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.apiGeneralV8.APIv8Baterias.config.entities.UserConfigEntity;
import com.apiGeneralV8.APIv8Baterias.config.repository.UserConfigRepository;
import com.apiGeneralV8.APIv8Baterias.dto.UserConfigEntityDTO;

@Service
public class UserClientService {
	@Autowired
	private UserConfigRepository userRepository;
	
	public UserConfigEntityDTO saveAddress(UserConfigEntity entity) {
		if(findAddress(entity)==null) {
			userRepository.save(entity);
			return new UserConfigEntityDTO().createInstance(entity);
		}else {
			return null;
		}
	}
	
	public void deleteAddress(UserConfigEntity entity) {
		//Validação de existencia dos critérios mínimos para busca.
		if(entity.getStrRoad()!=null && entity.getNumResidence()!=null
			&& entity.getStrCep()!=null) {
			UserConfigEntity address= findAddress(entity);
			if(address!=null) {
				userRepository.delete(address);
			}
		}
	}
	
	public UserConfigEntity findAddress(UserConfigEntity entity) {
		return userRepository.find(entity.getStrRoad(), entity.getNumResidence(),entity.getStrCep());
	}
	
	public UserConfigEntityDTO updateAdress(UserConfigEntity lastEntity, UserConfigEntity newEntity) {
		//Validação de existencia dos critérios mínimos para busca.
		if(lastEntity.getStrRoad()!=null && lastEntity.getNumResidence()!=null
			&& lastEntity.getStrCep()!=null) {
			UserConfigEntity entity = findAddress(lastEntity);
			if(entity!=null) {
				entity =entity.updateAllData(newEntity);
				userRepository.save(entity);
				return new UserConfigEntityDTO().createInstance(entity);
			}
		}
		return null;
	}
	public List<UserConfigEntityDTO> findAll(){
		return new UserConfigEntityDTO().createInstanceList(userRepository.findAll());
	}
	
	//Método semelhante ao findAddress usado para pegar uma lista sem id e retornar com ID
	//Caso algum endereço da lista não exista no banco ele é criado.
	public List<UserConfigEntity> getListAddress(List<UserConfigEntity> list){
		List<UserConfigEntity> listAddress = new ArrayList<>();
		for(UserConfigEntity add:list) {
			UserConfigEntity address =findAddress(add);
			if(address!=null) {
				listAddress.add(findAddress(address));
			}else {
				saveAddress(add);
				listAddress.add(findAddress(add));
			}
		}
		return listAddress;
	}
}
