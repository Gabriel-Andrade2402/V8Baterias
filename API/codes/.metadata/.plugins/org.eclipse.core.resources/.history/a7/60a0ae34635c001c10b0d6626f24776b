package com.apiGeneralV8.APIv8Baterias.services;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.apiGeneralV8.APIv8Baterias.dto.ClientEntityDTO;
import com.apiGeneralV8.APIv8Baterias.dto.RequestEntityDTO;
import com.apiGeneralV8.APIv8Baterias.entities.AddressEntity;
import com.apiGeneralV8.APIv8Baterias.entities.ClientEntity;
import com.apiGeneralV8.APIv8Baterias.entities.ConfigEntity;
import com.apiGeneralV8.APIv8Baterias.repositorys.ClientRepository;

@Service
public class ClientService {
	@Autowired
	private ClientRepository repository;
	@Autowired
	private AddressService addressService;
	@Autowired
	private ConfigService configService;
	
	public ClientEntityDTO saveClient(ClientEntity entity) {
		if(findClient(entity)==null) {
			repository.save(entity);
			return new ClientEntityDTO().createInstance(entity);
		}
		return null;
	}
	
	public void deleteClient(ClientEntity entity) {
		if(findClient(entity)!=null) {
			repository.delete(findClient(entity));
		}
	}
	
	private ClientEntity findClient(ClientEntity entity) {
		return repository.find(entity.getStrCpf(),entity.getStrEmail());
	}

	public ClientEntityDTO updateClient(ClientEntity lastEntity, ClientEntity newEntity) {
		ClientEntity entity = findClient(lastEntity);
		List<AddressEntity> listAddress = new ArrayList<>();
		ConfigEntity config = configService.findConfig(newEntity.getConfig_id());
		for(AddressEntity add:newEntity.getListAddress()) {
			AddressEntity address =addressService.findAddress(add);
			if(address!=null) {
				listAddress.add(addressService.findAddress(address));
			}else {
				addressService.saveAddress(add);
				listAddress.add(addressService.findAddress(add));
			}
		}
		if(config!=null) {
			newEntity.setConfig_id(config);
		}else {
			configService.saveConfig(newEntity.getConfig_id());
			newEntity.setConfig_id(configService.findConfig(newEntity.getConfig_id()));
		}
		if(entity!=null) {
			entity =entity.updateAllData(newEntity);
			repository.save(entity);
			return new ClientEntityDTO().createInstance(entity);
		}
		return null;
	}
	public List<ClientEntity> findAll(){ 
		return repository.findAll();
	}
	
	public List<RequestEntityDTO> findRequests(ClientEntity entity){
		ClientEntity clientEntity = findClient(entity);
		if(clientEntity!=null) {
			ClientEntityDTO client = new ClientEntityDTO().createInstance(clientEntity);
			return client.getListRequest();
		}
		return null;
	}
}
